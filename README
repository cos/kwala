kwala is a prototype inter-procedural, context and flow insensitive, field-sensitive pointer analysis for Java. We have taken a classical, Andersen-style (i.e., subset based) approach. Kwala passes the program once, gathering pointer constraints and solving them on-the-fly. 

Instead of analyzing Java directly, we rely on an intermediate representation provided by WALA ( T. J. Watson Libraries for Analysis). From WALA we get CFGs for all methods in the program and the all variables are transformed to SSA form. WALA provides a textual representation of the program which we adjusted slightly to make it parse. We have built an export tool in Java for analyzing source code using WALA and getting back the customized textual representation.

The pdf document generated by K (kwala.pdf) provides a good description of how the analysis progresses. The configuration contains three layers. The first layer, i.e. cell “method *” and its subcells, is the parsed initial code. The second layer is a static runtime representation of the program - this is where the constraints are gathered. The third layer contains the cells involved in solving the constraints.

Kwala's relevant output is the mapping between program variables and heap locations, i.e. the contents of “constraints - pointsTo”.